import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../../app/store';
import { getData } from './productlistAPI';

export interface ProductListState {
  outData: OutDatum[];
  outError: number;
  outMessage: string;
  loading: boolean
}

export interface OutDatum {
  productCode: string;
  productName: string;
  productPath: string;
  productPrice: string;
  promoPrice: string;
  isPromo: string;
  netto: string;
  ratting: string;
  soldByMember: string;
  typeDescription: string;
  categories: Category[];
  productAttribute: ProductAttribute[];
  isWishlist: string;
  productWeight: string;
}

export interface Category {
  category_code: string;
  category_name: string;
}

export interface ProductAttribute {
  attribute_name: string;
  attribute_value: string;
}


const initialState: ProductListState = {
  outData: [],
  outError: 0,
  outMessage: "",
  loading: true
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getList = createAsyncThunk(
  'productList/get-list',
  async (payload: { pageNumber: number, rowPerpage: number, search: string }) => {
    const response = await getData(payload.pageNumber.toString(), payload.rowPerpage.toString(), payload.search);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const productListSlice = createSlice({
  name: 'productList',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getList.pending, (state) => {
        state.loading = true
      })
      .addCase(getList.fulfilled, (state, action) => {
        console.log(action.payload)
        state.loading = false;
        state.outData = action.payload.outData
      });
  },
});

export function formatRupiah(angka: string, prefix: string) {
  var number_string = angka.replace(/[^,\d]/g, '').toString(),
    split = number_string.split(','),
    sisa = split[0].length % 3,
    rupiah = split[0].substr(0, sisa),
    ribuan = split[0].substr(sisa).match(/\d{3}/gi);

  // tambahkan titik jika yang di input sudah menjadi angka ribuan
  if (ribuan) {
    let separator = sisa ? '.' : '';
    rupiah += separator + ribuan.join('.');
  }

  rupiah = split[1] != undefined ? rupiah + ',' + split[1] : rupiah;
  return prefix == undefined ? rupiah : (rupiah ? 'Rp. ' + rupiah : '');
}

export const { } = productListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.productList.value)`
export const selectData = (state: RootState) => state.productlist;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default productListSlice.reducer;
